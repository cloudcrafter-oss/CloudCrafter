name: Backend Build

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
    
env:
  ASPNETCORE_ENVIRONMENT: Development
  
permissions:
  checks: write
  pull-requests: write

jobs:
  detect-test-projects:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    outputs:
      test-projects: ${{ steps.set-matrix.outputs.test-projects }}
    steps:
    - uses: actions/checkout@v4
    - id: set-matrix
      run: |
        TEST_PROJECTS=$(find ./tests -maxdepth 1 -type d -not -path '*/\.*' -not -path './tests' | jq -R -s -c 'split("\n")[:-1]')
        echo "test-projects=$TEST_PROJECTS" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore


  test:
    needs: [build, detect-test-projects]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      fail-fast: false 
      matrix:
        test-project: ${{fromJson(needs.detect-test-projects.outputs.test-projects)}}

    steps:
    - uses: actions/checkout@v4
    - name: Install Nixpacks
      run: curl -sSL https://nixpacks.com/install.sh | bash
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Copy development environment settings
      run: cp src/CloudCrafter.Web/appsettings.Development.example.json src/CloudCrafter.Web/appsettings.Development.json
    - name: Restore dependencies from cache
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      env:
        TESTS_GITHUB_APP_APP_ID: ${{ secrets.TESTS_GITHUB_APP_APP_ID }}
        TESTS_GITHUB_APP_CLIENT_ID: ${{ secrets.TESTS_GITHUB_APP_CLIENT_ID }}
        TESTS_GITHUB_APP_CLIENT_SECRET: ${{ secrets.TESTS_GITHUB_APP_CLIENT_SECRET }}
        TESTS_GITHUB_APP_WEBHOOK_SECRET: ${{ secrets.TESTS_GITHUB_APP_WEBHOOK_SECRET }}
        TESTS_GITHUB_APP_URL: ${{ secrets.TESTS_GITHUB_APP_URL }}
        TESTS_GITHUB_APP_PRIVATE_KEY: ${{ secrets.TESTS_GITHUB_APP_PRIVATE_KEY }}
      run: |
        project_name=$(basename ${{ matrix.test-project }})
        dotnet test ${{ matrix.test-project }} --logger trx --results-directory ./test-results --collect:"XPlat Code Coverage;Format=opencover" /p:DefineConstants="IN_TESTS"
    - name: Sanitize project name
      id: sanitize
      run: |
        sanitized=$(echo "${{ matrix.test-project }}" | sed 's/[^a-zA-Z0-9-]//g')
        echo "sanitized=$sanitized" >> $GITHUB_OUTPUT
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ steps.sanitize.outputs.sanitized }}
        path: ./backend/test-results

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.5.0
      if: always()
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        name: ${{ steps.sanitize.outputs.sanitized }}-coverage
        verbose: true
    
  validate-agent:
    needs: [test, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Build Docker image Agent
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        file: ./backend/src/CloudCrafter.Agent.Console/Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        tags: console
    - name: Run validate script
      run: |
        chmod +x ./ci/tests/validate_agent.sh
        ./ci/tests/validate_agent.sh
  
  validate-worker:
    needs: [test, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Build Docker image Worker
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        file: ./backend/src/CloudCrafter.Worker.Console/Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        tags: worker

  validate-web:
    needs: [test, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Build Docker image Web
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        file: ./backend/src/CloudCrafter.Web/Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        tags: web
    # - name: Run validate script
    #   run: |
    #     chmod +x ./ci/tests/validate_web.sh
    #     ./ci/tests/validate_web.sh
  