import { getStackDetail } from '../../../../__generated__'
import { expect, test } from '../../../../fixtures/project-fixture'
import { StackDetailPage } from '../../../../pages/projects/stack/stack.detail'

test('should be able to see empty service volumes', async ({
	page,
	stack,
	projectFixture,
}) => {
	const stackPage = StackDetailPage(page)

	await page.goto(stackPage.url(stack))

	const stackDetails = await getStackDetail(
		stack.stack.id,
		projectFixture.getApiClientConfig(),
	)

	// a service should be auto-generated by the service
	expect(stackDetails.services.length).toBeGreaterThan(0)

	expect(stackPage.services.button).toBeVisible()

	await stackPage.services.button.click()

	// Get the service ID and the container locators
	const serviceId = stackDetails.services[0].id
	const serviceContainer = stackPage.services.container(serviceId)

	// Expect the container locator itself to be visible
	expect(serviceContainer.locator).toBeVisible()

	// Click the storage tab within the container
	await serviceContainer.tab.storage.locator.click()

	// Expect the storage tab to be visible
	expect(serviceContainer.tab.storage.locator).toBeVisible()

	// Expect the content to be visible
	expect(serviceContainer.tab.storage.content.locator).toBeVisible()

	await expect(page.getByText('No volumes configured')).toBeVisible()
})

test('should be able to add a volume to a service', async ({
	page,
	stack,
	projectFixture,
}) => {
	const stackPage = StackDetailPage(page)

	await page.goto(stackPage.url(stack))

	const stackDetails = await getStackDetail(
		stack.stack.id,
		projectFixture.getApiClientConfig(),
	)

	// a service should be auto-generated by the service
	expect(stackDetails.services.length).toBeGreaterThan(0)

	expect(stackPage.services.button).toBeVisible()

	await stackPage.services.button.click()

	// Get the service ID and the container locators
	const serviceId = stackDetails.services[0].id
	const serviceContainer = stackPage.services.container(serviceId)

	// Expect the container locator itself to be visible
	expect(serviceContainer.locator).toBeVisible()

	// Click the storage tab within the container
	await serviceContainer.tab.storage.locator.click()

	// Expect the storage tab to be visible
	expect(serviceContainer.tab.storage.locator).toBeVisible()

	// Expect the content to be visible
	expect(serviceContainer.tab.storage.content.locator).toBeVisible()

	// Click the add volume button
	await serviceContainer.tab.storage.content.addVolumeButton.click()

	// Expect the add volume modal to be visible
	expect(serviceContainer.tab.storage.content.modal.locator).toBeVisible()

	// Fill in the form
	await serviceContainer.tab.storage.content.modal.form.name.fill('test-volume')
	await serviceContainer.tab.storage.content.modal.form.source.fill('/data')
	await serviceContainer.tab.storage.content.modal.form.target.fill(
		'/var/lib/data',
	)

	// Submit the form
	await serviceContainer.tab.storage.content.modal.form.submit.click()

	await expect(page.getByText('Volume added successfully')).toBeVisible()
})
