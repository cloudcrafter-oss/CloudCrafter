import type { Page } from '@playwright/test'
import {
	getStackDetail,
	getStackServiceVolumes,
} from '../../../../__generated__'
import { expect, test } from '../../../../fixtures/project-fixture'
import { StackDetailPage } from '../../../../pages/projects/stack/stack.detail'

// Define the structure for volume details
interface VolumeDetails {
	name: string
	source: string
	target: string
}

// Reusable function to add a service volume
async function addServiceVolume(
	page: Page,
	stackPage: ReturnType<typeof StackDetailPage>,
	serviceId: string,
	volume: VolumeDetails,
) {
	const serviceContainer = stackPage.services.container(serviceId)

	// Click the storage tab within the container
	await serviceContainer.tab.storage.locator.click()

	// Expect the storage tab to be visible
	expect(serviceContainer.tab.storage.locator).toBeVisible()

	// Expect the content to be visible
	expect(serviceContainer.tab.storage.content.locator).toBeVisible()

	// Click the add volume button
	await serviceContainer.tab.storage.content.addVolumeButton.click()

	// Expect the add volume modal to be visible
	expect(serviceContainer.tab.storage.content.modal.locator).toBeVisible()

	// Fill in the form
	await serviceContainer.tab.storage.content.modal.form.name.fill(volume.name)
	await serviceContainer.tab.storage.content.modal.form.source.fill(
		volume.source,
	)
	await serviceContainer.tab.storage.content.modal.form.target.fill(
		volume.target,
	)

	// Submit the form
	await serviceContainer.tab.storage.content.modal.form.submit.click()

	await expect(page.getByText('Volume created successfully')).toBeVisible()
}

test('should be able to see empty service volumes', async ({
	page,
	stack,
	projectFixture,
}) => {
	const stackPage = StackDetailPage(page)

	await page.goto(stackPage.url(stack))

	const stackDetails = await getStackDetail(
		stack.stack.id,
		projectFixture.getApiClientConfig(),
	)

	// a service should be auto-generated by the service
	expect(stackDetails.services.length).toBeGreaterThan(0)

	await stackPage.goToServiceOverview()

	// Get the service ID and the container locators
	const serviceId = stackDetails.services[0].id
	const serviceContainer = stackPage.services.container(serviceId)

	// Expect the container locator itself to be visible
	expect(serviceContainer.locator).toBeVisible()

	// Click the storage tab within the container
	await serviceContainer.tab.storage.locator.click()

	// Expect the storage tab to be visible
	expect(serviceContainer.tab.storage.locator).toBeVisible()

	// Expect the content to be visible
	expect(serviceContainer.tab.storage.content.locator).toBeVisible()

	await expect(page.getByText('No volumes configured')).toBeVisible()
})

test('should be able to add a service volume', async ({
	page,
	stack,
	projectFixture,
}) => {
	const stackPage = StackDetailPage(page)

	await page.goto(stackPage.url(stack))

	const stackDetails = await getStackDetail(
		stack.stack.id,
		projectFixture.getApiClientConfig(),
	)

	// a service should be auto-generated by the service
	expect(stackDetails.services.length).toBeGreaterThan(0)

	await stackPage.goToServiceOverview()

	// Get the service ID and the container locators
	const serviceId = stackDetails.services[0].id
	const serviceContainer = stackPage.services.container(serviceId)

	// Expect the container locator itself to be visible
	expect(serviceContainer.locator).toBeVisible()

	// Call the reusable function to add the volume
	await addServiceVolume(page, stackPage, serviceId, {
		name: 'test-volume',
		source: '/data',
		target: '/var/lib/data',
	})
})

test('should be able to edit a volume', async ({
	page,
	stack,
	projectFixture,
}) => {
	const stackPage = StackDetailPage(page)

	await page.goto(stackPage.url(stack))

	const stackDetails = await getStackDetail(
		stack.stack.id,
		projectFixture.getApiClientConfig(),
	)

	// a service should be auto-generated by the service
	expect(stackDetails.services.length).toBeGreaterThan(0)

	await stackPage.goToServiceOverview()

	// Get the service ID and the container locators
	const serviceId = stackDetails.services[0].id
	const serviceContainer = stackPage.services.container(serviceId)

	// Expect the container locator itself to be visible
	expect(serviceContainer.locator).toBeVisible()

	// Call the reusable function to add the volume
	await addServiceVolume(page, stackPage, serviceId, {
		name: 'test-volume',
		source: '/data',
		target: '/var/lib/data',
	})

	const volumes = await getStackServiceVolumes(
		stack.stack.id,
		stackDetails.services[0].id,
		projectFixture.getApiClientConfig(),
	)

	expect(volumes.length).toBe(1)

	const volume = volumes[0]

	const editButton = serviceContainer.tab.storage.content.editButton(volume.id)

	await editButton.click()

	expect(serviceContainer.tab.storage.content.modal.locator).toBeVisible()

	// assert the inputs are filled with correct data
	expect(serviceContainer.tab.storage.content.modal.form.name).toHaveValue(
		volume.name,
	)
	expect(serviceContainer.tab.storage.content.modal.form.source).toHaveValue(
		volume.sourcePath ?? '',
	)
	expect(serviceContainer.tab.storage.content.modal.form.target).toHaveValue(
		volume.destinationPath,
	)

	// change the data
	await serviceContainer.tab.storage.content.modal.form.name.fill(
		'test-volume-edited',
	)
	await serviceContainer.tab.storage.content.modal.form.source.fill(
		'/data-edited',
	)
	await serviceContainer.tab.storage.content.modal.form.target.fill(
		'/var/lib/data-edited',
	)

	// submit the form
	await serviceContainer.tab.storage.content.modal.form.submit.click()

	await expect(page.getByText('Volume updated successfully')).toBeVisible()
})
