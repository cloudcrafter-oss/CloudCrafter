using Ardalis.SharedKernel;
using CloudCrafter.Core.Common.Interfaces;
using CloudCrafter.Core.Events.DomainEvents;
using CloudCrafter.Core.Interfaces.Domain.Stacks.Filters;
using CloudCrafter.Core.Interfaces.Repositories;
using CloudCrafter.Domain.Common;
using CloudCrafter.Domain.Domain.Application.Services;
using CloudCrafter.Domain.Domain.Stack;
using CloudCrafter.Domain.Domain.Stack.Filter;
using CloudCrafter.Domain.Entities;
using CloudCrafter.Domain.Entities.Jobs;
using Microsoft.EntityFrameworkCore;

namespace CloudCrafter.Infrastructure.Repositories;

public class StackRepository(IApplicationDbContext context) : IStackRepository
{
    public async Task<Stack> CreateStack(CreateStackArgsDto args)
    {
        if (string.IsNullOrWhiteSpace(args.GitRepository))
        {
            throw new ArgumentOutOfRangeException("Not supported yet");
        }

        var stack = new Stack
        {
            Id = Guid.NewGuid(),
            Name = args.Name,
            EnvironmentId = args.EnvironmentId,
            ServerId = args.ServerId,
            Description = null,
            // TODO: Handle source different
            Source = new ApplicationSource
            {
                Type = ApplicationSourceType.Git,
                Git = new ApplicationSourceGit { Repository = args.GitRepository },
            },
            // TODO: Allow multiple options
            BuildPack = StackBuildPack.Nixpacks,
            HealthStatus = new StackHealthEntity
            {
                StatusAt = null,
                Value = EntityHealthStatusValue.Unknown,
            },
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
        };

        context.Stacks.Add(stack);

        stack.AddDomainEvent(DomainEventDispatchTiming.AfterSaving, new StackCreatedEvent(stack));

        await context.SaveChangesAsync();

        var stackFromDb = await GetStackInternal(stack.Id);

        return stackFromDb!;
    }

    public async Task<Stack?> GetStack(Guid id)
    {
        var stack = await GetStackInternal(id, false);

        return stack;
    }

    public async Task AddAppServiceToStack(Guid stackId, string name)
    {
        var stackService = new StackService
        {
            Id = Guid.NewGuid(),
            Name = name,
            Description = $"Auto generated by CloudCrafter at {DateTime.UtcNow}",
            StackServiceTypeId = StackServiceTypeConstants.App,
            StackId = stackId,
            HealthStatus = new EntityStackServiceHealthStatus(),
            // TODO: Based on the StackServiceType, we should add HttpConfiguration
            // E.g. databases should not get this.
            HttpConfiguration = null,
            HealthcheckConfiguration = new EntityHealthcheckConfiguration(),
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
        };

        context.StackServices.Add(stackService);

        await context.SaveChangesAsync();
    }

    public async Task<Guid> CreateDeployment(Guid stackId)
    {
        var stack = await GetStack(stackId);

        if (stack == null)
        {
            throw new ArgumentNullException("Stack not found");
        }

        var deployment = new Deployment
        {
            Id = Guid.NewGuid(),
            StackId = stackId,
            ServerId = stack.ServerId,
            Logs = new List<DeploymentLog>(),
            State = DeploymentState.Created,
            RecipeYaml = null,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
        };

        context.Deployments.Add(deployment);
        await context.SaveChangesAsync();

        return deployment.Id;
    }

    public Task<StackService?> GetService(Guid stackServiceId)
    {
        return context
            .StackServices.Where(x => x.Id == stackServiceId)
            .Include(x => x.Stack)
            .FirstOrDefaultAsync();
    }

    public Task<List<Deployment>> GetDeployments(DeploymentsFilter filter)
    {
        IQueryable<Deployment> deployments = context.Deployments.Include(x => x.Stack);

        if (filter.StackId.HasValue)
        {
            deployments = (
                from zz in deployments
                where zz.StackId == filter.StackId.Value
                select zz
            );
        }

        if (filter.ServerId.HasValue)
        {
            deployments = (
                from zz in deployments
                where zz.Stack != null && zz.Stack.ServerId == filter.ServerId
                select zz
            );
        }

        return deployments.OrderByDescending(x => x.CreatedAt).ToListAsync();
    }

    public async Task<List<Stack>> FilterStacks(StackFilter filter)
    {
        IQueryable<Stack> stacks = context.Stacks.Include(x => x.Services);

        if (filter.HealthCheckAgeOlderThan.HasValue)
        {
            stacks = (
                from zz in stacks
                where
                    !zz.HealthStatus.StatusAt.HasValue
                    || zz.HealthStatus.StatusAt.Value
                        < DateTime.UtcNow - filter.HealthCheckAgeOlderThan.Value
                select zz
            );

            stacks = (
                from zz in stacks
                from service in zz.Services
                where
                    !service.HealthStatus.StatusAt.HasValue
                    || service.HealthStatus.StatusAt.Value
                        < DateTime.UtcNow - filter.HealthCheckAgeOlderThan.Value
                select zz
            );
        }

        return await stacks.ToListAsync();
    }

    public Task SaveChangesAsync()
    {
        return context.SaveChangesAsync();
    }

    private async Task<Stack?> GetStackInternal(Guid id, bool throwExceptionOnNotFound = true)
    {
        var stack = await context
            .Stacks.Include(x => x.Services)
            .Include(x => x.Server)
            .Include(x => x.Environment)
            .ThenInclude(x => x!.Project)
            .FirstOrDefaultAsync(x => x.Id == id);

        if (stack is null && throwExceptionOnNotFound)
        {
            throw new ArgumentNullException("Stack not found");
        }

        return stack;
    }
}
